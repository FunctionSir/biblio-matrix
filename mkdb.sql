CREATE DATABASE LIBMAN;
GO

USE LIBMAN;
GO

CREATE TABLE ADMINS (
	USERNAME VARCHAR(64) PRIMARY KEY CHECK(LEN(USERNAME)>=3),
	PASSWD VARCHAR(255) NOT NULL UNIQUE,
	"NAME" VARCHAR(64)
);

CREATE TABLE READERS (
	USERNAME VARCHAR(64) PRIMARY KEY CHECK(LEN(USERNAME)>=3),
	PASSWD VARCHAR(255) NOT NULL UNIQUE,
	"NAME" VARCHAR(64),
	CNT INTEGER NOT NULL CHECK(CNT>=0)
);

CREATE TABLE BOOKS (
	ID VARCHAR(36) PRIMARY KEY CHECK(ISNUMERIC(ID)=1 AND LEN(ID)>=4),
	"NAME" VARCHAR(255) NOT NULL,
	AUTHOR VARCHAR(255) NOT NULL,
	PRICE INTEGER NOT NULL,
	CNT INTEGER NOT NULL CHECK(CNT>=0)
);

CREATE TABLE RECORDS (
	USERNAME VARCHAR(64) NOT NULL,
	ID VARCHAR(36) NOT NULL,
	BORROWED DATETIME NOT NULL,
	"RETURN" DATETIME NOT NULL,
	PRIMARY KEY (USERNAME,ID),
	FOREIGN KEY (USERNAME) REFERENCES READERS,
	FOREIGN KEY (ID) REFERENCES BOOKS
);
GO

CREATE VIEW READERS_OVERDUE (USERNAME, "NAME")
AS
SELECT DISTINCT READERS.USERNAME,"NAME"
FROM RECORDS,READERS
WHERE RECORDS.USERNAME=READERS.USERNAME AND GETDATE()>RECORDS."RETURN"
WITH CHECK OPTION
GO

CREATE VIEW BOOKS_BORROWED (ID,"NAME",AUTHOR,TOT_BORROWED)
AS
SELECT BOOKS.ID,"NAME",AUTHOR,COUNT(*) AS CNT
FROM BOOKS,RECORDS
WHERE BOOKS.ID=RECORDS.ID
GROUP BY BOOKS.ID,"NAME",AUTHOR
UNION
SELECT BOOKS.ID,"NAME",AUTHOR,0 AS CNT
FROM BOOKS
WHERE (BOOKS.ID NOT IN (SELECT ID FROM RECORDS))
GO

CREATE TRIGGER CHK_BOOK_CNT
ON BOOKS
AFTER INSERT, UPDATE
AS
BEGIN
	IF EXISTS (
		SELECT * FROM BOOKS
		WHERE CNT<0
	) BEGIN
		ROLLBACK TRANSACTION;
		RAISERROR('col CNT of BOOKS can not be negative.',16,1);
	END;
END;
GO

CREATE TRIGGER CHK_READERS_CNT
ON READERS
AFTER INSERT, UPDATE
AS
BEGIN
	IF EXISTS (
		SELECT * FROM READERS
		WHERE CNT<0
	) BEGIN
		ROLLBACK TRANSACTION;
		RAISERROR('col CNT of READERS can not be negative.',16,1);
	END;
END;
GO

CREATE TRIGGER CHK_READERS_USERNAME
ON READERS
AFTER INSERT, UPDATE
AS
BEGIN
	IF EXISTS (
		SELECT * FROM READERS
		WHERE (USERNAME IN (SELECT USERNAME FROM ADMINS))
	) BEGIN
		ROLLBACK TRANSACTION;
		RAISERROR('found conflict username in table READERS and ADMINS.',16,1);
	END;
END;
GO

CREATE TRIGGER CHK_ADMINS_USERNAME
ON ADMINS
AFTER INSERT, UPDATE
AS
BEGIN
	IF EXISTS (
		SELECT * FROM ADMINS
		WHERE (USERNAME IN (SELECT USERNAME FROM READERS))
	) BEGIN
		ROLLBACK TRANSACTION;
		RAISERROR('found conflict username in table ADMINS and READERS.',16,1);
	END;
END;
GO

CREATE PROC REMOVE_USER
@TARGET VARCHAR(64)
AS
BEGIN
	IF EXISTS (SELECT * FROM ADMINS WHERE USERNAME=@TARGET) BEGIN
		DELETE FROM ADMINS WHERE USERNAME=@TARGET;
	END ELSE BEGIN
		IF EXISTS (SELECT * FROM RECORDS WHERE USERNAME=@TARGET) BEGIN
			RAISERROR('this user still has at least one book not be returned.',16,1);
		END ELSE BEGIN
			DELETE FROM READERS WHERE USERNAME=@TARGET;
		END;
	END;
END;
GO

CREATE LOGIN LIBMAN_USER WITH PASSWORD='$$BIBLIO-MATRIX-DB-OWNER$$', DEFAULT_DATABASE=LIBMAN;
CREATE USER LIBMAN_USER FOR LOGIN LIBMAN_USER WITH DEFAULT_SCHEMA=DBO;
EXEC SP_ADDROLEMEMBER 'DB_OWNER', 'LIBMAN_USER';
GO

-- DEFAULT SUPERADMIN PASSWORD IS ~~!!SUPER!!~~
INSERT INTO ADMINS VALUES ('SUPERADMIN','$2a$14$S19DzyoanX.upUbXbTQHeuEk8w9m4QW.bcE6TzNcIgxFMVLcipXxu','SUPERADMIN')
GO